---
# Sets up an AWS ECS cluster in a VPC 

- hosts: localhost

  vars:
    sg_http_rule:
    - proto: tcp
      ports: [80]
      cidr_ip: 0.0.0.0/0
      rule_desc: "Allow HTTP from anywhere"

  tasks:
  - name: get Configuration
    include_vars: file=config.yml name=config
    tags: test
  - debug: var=config


  - include_role:
      name: aws-vpc
    vars:
      prefix: "{{ config.app_name }}"
      aws_region: "{{config.aws_region}}"
      vpc_cidr_block: "{{ config.vpc_cidr_block }}"
      vpc_routes: "{{ config.vpc_routes }}"
      ssh_cidr_list: "{{ config.ssh_cidr_list }}"


  - name: Set up security group for application access
    ec2_group:
      state: present
      name: "{{ config.app_name }}-sg-app"
      region: "{{ config.aws_region }}"
      vpc_id: "{{ aws_vpc.vpc.id }}"
      description: "Security group for {{ config.app_name }}."
      rules: "{{ sg_http_rule }}"
    register: tmp_sg

  - name: Create ECS role to manage cluster
    iam_role: 
      name: "{{config.app_name}}-ecsServiceRole" 
      assume_role_policy_document: "{{ lookup('file','files/ecsrole-trust-policy.json') }}"
      description: "ECS: {{config.app_name}} cluster"
      managed_policy:
        - "arn:{{config.arn_partition}}:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
        - "arn:{{config.arn_partition}}:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole"
        - "arn:{{config.arn_partition}}:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
        - "arn:{{config.arn_partition}}:iam::aws:policy/AmazonECS_FullAccess"
        - "arn:{{config.arn_partition}}:iam::aws:policy/AmazonEC2FullAccess"
    register: ecs_role


  - name: Create ECS cluster
    ecs_cluster:
      state: present
      region: "{{ config.aws_region }}"
      name: "{{ config.app_name }}-ecs"
    register: ecs_cluster
  - debug: var=ecs_cluster


  - name: Get arsnova image names from local Docker
    shell: "docker images |awk '/^arsnova\\// {print $1\":\"$2}'"
    become: true
    register: images

  - name: Get AWS ECS login credentials for Docker
    become: true
    shell: "$(aws ecr get-login --region {{ config.aws_region }})"

  # Upload arsnova images to ECS image repositories
  - include_tasks: uploadimages.yml
    vars: 
      aws_region: "{{config.aws_region}}"
    with_items: "{{ images.stdout_lines }}"

  - name: Create task definition
    ecs_taskdefinition:
      state: present
      region: "{{ config.aws_region }}"
      family: "{{config.app_name}}-task"
      network_mode: bridge
      task_role_arn: "{{ ecs_role.arn }}"
      containers:
      - name: nginx
        image: "{{config.aws_account_id}}.dkr.ecr.{{config.aws_region}}.amazonaws.com/arsnova/arsnova-nginx:latest"
        links:
        - webapp
        essential: False
        cpu: 256
        memory: 512
        portMappings:
        - containerPort: 80
          hostPort: 80
      - name: webapp
        image: "{{config.aws_account_id}}.dkr.ecr.{{config.aws_region}}.amazonaws.com/arsnova/arsnova-webapp:latest"
        links:
        - couchdb
        essential: False
        cpu: 256
        memory: 512
        portMappings:
        - containerPort: 8080
          hostPort: 8080
        - containerPort: 8090
          hostPort: 8090
        environment:
        - name: ARSNOVA_ROOT_URL
          value: "http://{{config.app_domain}}/"
      - name: couchdb
        image: "{{config.aws_account_id}}.dkr.ecr.{{config.aws_region}}.amazonaws.com/arsnova/arsnova-couchdb:latest"
        cpu: 256
        memory: 512
        portMappings:
        - containerPort: 5984
          hostPort: 5984
        mountPoints:
        - containerPath: /usr/local/var/lib/couchdb
          sourceVolume: couchdb-vol
      volumes:
      - name: couchdb-vol
        dockerVolumeConfiguration:
          scope: "shared"
          autoprovision: True
#        host:
#          sourcePath: /var/lib/docker
          
  - name: Configure ECS Service
    ecs_service:
      state: present
      name: "{{config.app_name}}-service"
      region: "{{ config.aws_region }}"
      cluster: "{{ config.app_name }}-ecs"
      desired_count: 1
      task_definition: "{{config.app_name}}-task"


  - name: Find ECS AMIs
    ec2_ami_facts:
      filters:
        state: [ "available" ]
        owner-id: [ "580842271618" ]
        architecture: [ "x86_64" ]
        virtualization-type: [ "hvm" ]
        description: "Amazon Linux AMI *"
    register: tmp_amis

  - name: Find latest ECS image
    set_fact: ecs_ami="{{ tmp_amis.images |sort(reverse=True, attribute='name') |first }}"

  - name: Start ECS cluster instance
    ec2_instance:
      state: running
      region: "{{ config.aws_region }}"
      name: "{{config.app_name}}-{{item.name_suffix}}"
      cpu_credit_specification: standard
      image_id: "{{ ecs_ami.image_id }}"
      instance_initiated_shutdown_behavior: stop
      instance_role: "{{ecs_role.role_name}}"
      instance_type: t2.small
      key_name: "{{config.ssh_key_name}}"
      network:
        private_ip_address: "{{item.ip}}"
        assign_public_ip: yes
      security_groups: ["{{ config.app_name }}-sg-app","{{ aws_vpc.security_group.group_name }}"]
      user_data: |
        #!/bin/bash
        echo "ECS_CLUSTER={{config.app_name}}-ecs" >>/etc/ecs/ecs.config
      vpc_subnet_id: "{{aws_vpc.subnet.id}}"
    with_items: "{{ config.ecs_containers }}"

#  - name: Wait for instances to start
#    ecs_cluster:
#      state: has_instances
#      region: "{{ config.aws_region }}"
#      name: "{{ config.app_name }}-ecs"
#      delay: 10
#      repeat: 12

  - name: Start ECS task
    ecs_task:
      operation: run
      region: "{{ config.aws_region }}"
      cluster: "{{ config.app_name }}-ecs"
      count: 1
      started_by: "Ansible arsnova"
      task_definition: "{{config.app_name}}-task"
    tags: test
